#ifndef  BLOCK_H
#define BLOCK_H

#include "stdafx.h"

#define MAX 6

//블록들의 정보를 담고있는 클래스
class Block {
public:
	Block();
	~Block();
	void TurnBlock();
	void TurnUndo();
	Point* PopBlock();
	Point* GetBlockPoint();
	Point* GetNextBlockInfo();

private:
	void Init();
	void UpdateBlockPoint();
	void PushBlock();
	

private:
	const Point Blocks[7][4][4]{ { { { 0, 0 },{ 0, 1 },{ 1, 1 },{ 1, 0 } },{ { 0, 0 },{ 0, 1 },{ 1, 1 },{ 1, 0 } },{ { 0, 0 },{ 0, 1 },{ 1, 1 },{ 1, 0 } },{ { 0, 0 },{ 0, 1 },{ 1, 1 },{ 1, 0 } } },
	{ { { 0, 0 },{ 0, 1 },{ 0, 2 },{ 0, 3 } },{ { 0, 3 },{ 1, 3 },{ 2, 3 },{ 3, 3 } },{ { 0, 0 },{ 0, 1 },{ 0, 2 },{ 0, 3 } },{ { 0, 3 },{ 1, 3 },{ 2, 3 },{ 3, 3 } } },
	{ { { 0, 0 },{ 1, 0 },{ 0, 1 },{ 0, 2 } },{ { 0, 1 },{ 1, 1 },{ 2, 1 },{ 2, 2 } },{ { 1, 0 },{ 1, 1 },{ 1, 2 },{ 0, 2 } },{ { 0, 1 },{ 0, 2 },{ 1, 2 },{ 2, 2 } } },
	{ { { 0, 0 },{ 1, 0 },{ 1, 1 },{ 1, 2 } },{ { 0, 2 },{ 1, 2 },{ 2, 2 },{ 2, 1 } },{ { 0, 0 },{ 0, 1 },{ 0, 2 },{ 1, 2 } },{ { 0, 2 },{ 0, 1 },{ 1, 1 },{ 2, 1 } } },
	{ { { 0, 2 },{ 1, 2 },{ 1, 1 },{ 2, 1 } },{ { 0, 0 },{ 0, 1 },{ 1, 1 },{ 1, 2 } },{ { 0, 2 },{ 1, 2 },{ 1, 1 },{ 2, 1 } },{ { 0, 0 },{ 0, 1 },{ 1, 1 },{ 1, 2 } } },
	{ { { 0, 1 },{ 1, 1 },{ 1, 2 },{ 2, 2 } },{ { 1, 0 },{ 1, 1 },{ 0, 1 },{ 0, 2 } },{ { 0, 1 },{ 1, 1 },{ 1, 2 },{ 2, 2 } },{ { 1, 0 },{ 1, 1 },{ 0, 1 },{ 0, 2 } } },
	{ { { 1, 1 },{ 0, 2 },{ 1, 2 },{ 2, 2 } },{ { 1, 0 },{ 1, 1 },{ 2, 1 },{ 1, 2 } },{ { 0, 1 },{ 1, 1 },{ 1, 2 },{ 2, 1 } },{ { 0, 1 },{ 1, 0 },{ 1, 1 },{ 1, 2 } } }
	};
	std::deque<int> nextBlocks;	//다음에 생성될 블록들의 모양을 저장하기 위한 큐.
	int blockShape;	//블록의 모양을 결정하는 변수
	int blockRotation;	//블록의 회전 상태를 결정하는 변수
	int numberOfBlock;		//큐에 저장되있는 블록의 개수를 나타내는 변수
	Point block[4];	//블록의 좌표를 저장하는 Point 배열
	Point nextBlock[4];	//다음에 생성될 블록의 좌표를 저장하는 Point 배열

};

#endif 